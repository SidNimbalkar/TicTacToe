<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->

    <title>Tic-Tac-Toe</title>

    <!-- Bootstrap -->
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <style>
        table {
            margin: 0 auto;
            table-layout: fixed;
            font-size: 50px;
        }

        table td {
            width: 100px;
            height: 100px;
        }

        table tr {
            border-bottom: 3px solid black;
        }
        table tr:last-child {
            border-bottom: none;
        }

        table td {
            border-right: 3px solid black;
        }
        table td:last-child {
            border-right: none;
        }
    </style>
</head>
<body>
    <script id="board-template" type="text/x-handlebars-template">
        {{debug}}
        <table>
            <tbody>
                {{#each Pieces}}
                <tr>
                    {{#each this}}
                    <td id="pos-{{@@../index}}-{{@@index}}">{{this}}</td>
                    {{/each}}
                </tr>
                {{/each}}
            </tbody>
        </table>
    </script>

    <main class="container text-center">
        <h1>Tic-Tac-Toe</h1>

        <div class="form-inline">
            <div class="form-group" id="usernameGroup">
                <label class="sr-only control-label" for="username">Username</label>
                <input type="text" class="form-control" id="username" placeholder="Username" autofocus />
            </div>
            <button type="submit" id="findGame" class="btn btn-primary">Find Game</button>
            <p id="status" class="help-block">Please enter your desired username.</p>
        </div>
        <div id="board">
        </div>
    </main>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="~/Scripts/jquery-1.9.1.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="~/Scripts/bootstrap.js"></script>
    <script src="~/Scripts/handlebars.js"></script>
    <!-- SignalR references must be in this order (include jquery first) -->
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <script src="~/signalr/hubs"></script>  

    <script type="text/javascript">
        $(function () {
            Handlebars.registerHelper("debug", function () {
                console.log("Current Context");
                console.log(this);
            });

            // by default the FindGame button should be disabled until a connection to the Hub is made
            // but username textbox is enabled until game has started
            disableInput();
            $('#username').removeAttr('disabled');

            // CLIENT STATE
            // The ID of this player
            var playerId;

            // keep a reference to the hub
            var gameHub = $.connection.gameHub;

            // CLIENT METHODS
            // Prevent players from joining again
            gameHub.client.playerJoined = function (player) {
                playerId = player.Id;
                $('#usernameGroup').removeClass("has-error");
                disableInput();
            };

            // The username is already taken
            gameHub.client.usernameTaken = function () {
                $('#status').html("The username is already taken.");
                $('#usernameGroup').addClass("has-error");
            };

            // The opponent left so game is over and allow player to find a new game
            gameHub.client.opponentLeft = function () {
                $('#status').html("Opponent has left. Game over.");
                endGame();
            };

            // Notify player that they are in a waiting pool for another opponent
            gameHub.client.waitingList = function () {
                $('#status').html("Waiting for an opponent.");
            };

            // Starts a new game by displaying the board and showing whose turn it is
            gameHub.client.start = function (game) {
                buildBoard(game.Board);
                var opponent = getOpponent(game);
                displayOpponent(opponent);
                displayTurn(game.WhoseTurn, true);
            };

            // Handles the case where a user tried to place a piece not on their turn
            gameHub.client.notPlayersTurn = function () {
                $('#status').html("Please wait your turn.");
            };

            // Display a message if move is not valid
            gameHub.client.notValidMove = function () {
                $('#status').html("Please choose another location.");
            };

            // A piece has been placed on the board
            gameHub.client.piecePlaced = function (row, col, piece) {
                $('#pos-' + row + '-' + col).html(piece);
            };

            // TODO: can be combined with piecePlaced by having the server
            // send the whole game object, render the board and update in one method
            gameHub.client.updateTurn = function (game) {
                displayTurn(game.WhoseTurn);
            };

            // Handle the tie game - game over scenario
            gameHub.client.tieGame = function () {
                $('#status').html("Tie!");
                endGame();
            };

            // Handle the tie game - game over scenario
            gameHub.client.winner = function (playerName) {
                $('#status').html("Winner: " + playerName);
                endGame();
            };

            // CLIENT BEHAVIORS
            // Call server to find a game if button is clicked
            $('#findGame').click(function () {
                var chosenUsername = $('#username').val();
                gameHub.server.findGame(chosenUsername);
            });

            //pressing 'Enter' will automatically click Find Game button
            $('#username').keypress(function (e) {
                if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
                    $('#findGame').click();
                    return false;
                }

                return true;
            });

            // Enables username and find game inputs
            function enableInput() {
                $('#username').removeAttr('disabled');
                $('#findGame').removeAttr('disabled');
                $('#username').focus();
            };

            // Disables username and find game inputs
            function disableInput() {
                $('#username').attr('disabled', 'disabled');
                $('#findGame').attr('disabled', 'disabled');
            };

            // Game over business logic should disable board button handlers and 
            // allow player to join a new game
            function endGame() {
                // Remove click handlers from board positions
                $('td[id^=pos-]').off('click');
                enableInput();
            };

            // Display whose turn it is
            function displayTurn(playersTurn, isDisplayingOpponent) {
                var turnMessage = "";
                if (playerId == playersTurn.Id) {
                    turnMessage = "Your turn";
                } else {
                    turnMessage = playersTurn.Name + "\'s turn";
                }

                // Do not overwrite opponent's name if it is being displayed
                if (isDisplayingOpponent) {
                    $('#status').html($('#status').html() + turnMessage);
                } else {
                    $('#status').html(turnMessage);
                }
            };

            // Displays the opponents name
            function displayOpponent(opponent) {
                $('#status').html("You are playing against " + opponent.Name + "<br />");
            };

            // Build and display the board
            function buildBoard(board) {
                var template = Handlebars.compile($('#board-template').html());
                $('#board').html(template(board));

                // attach click handlers to each position
                $('td[id^=pos-]').click(function (e) {
                    e.preventDefault();
                    var id = this.id; // "pos-0-0"
                    var parts = id.split("-"); // [pos, 0, 0]
                    var row = parts[1];
                    var col = parts[2];
                    gameHub.server.placePiece(row, col);
                });
            };

            // Retrieves the opponent player from the game
            function getOpponent(game) {
                if (playerId == game.Player1.Id) {
                    return game.Player2;
                } else {
                    return game.Player1;
                }
            };

            // Open a connection to the server hub
            $.connection.hub.logging = true; // Enable client side logging
            $.connection.hub.start().done(function () {
                // Enable the find game button
                enableInput();
            });
        });
    </script>
</body>
</html>